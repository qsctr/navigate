'use strict';
var uniformCostSearch = function (start, goal) {
    return bestFirstSearch(start, goal, function (_a) {
        var parentScore = _a.parentScore, distance = _a.distance;
        return parentScore + distance;
    });
};
var greedySearch = function (start, goal) {
    return bestFirstSearch(start, goal, function (_a) {
        var node = _a.node;
        return distanceBetween(node, goal);
    });
};
var aStarSearch = function (start, goal) {
    return bestFirstSearch(start, goal, function (_a) {
        var node = _a.node, parentScore = _a.parentScore, distance = _a.distance;
        return parentScore + distance + distanceBetween(node, goal);
    });
};
function bestFirstSearch(start, goal, scoreFunc) {
    var expanded = [];
    var scores = new Map([[start.id, scoreFunc({
                node: start,
                parentScore: 0,
                distance: 0
            })]]);
    var parents = new Map();
    var fringe = new PriorityQueue({
        comparator: function (a, b) { return scores.get(a.id) - scores.get(b.id); },
        initialValues: [start]
    });
    while (fringe.length > 0) {
        var current = fringe.dequeue();
        var currentScore = scores.get(current.id);
        expanded.push(current);
        for (var _i = 0, _a = current.connections; _i < _a.length; _i++) {
            var _b = _a[_i], distance = _b.distance, child = _b.child;
            if (expanded.includes(child)) {
                continue;
            }
            if (child === goal) {
                expanded.push(child);
                var path = [current, goal];
                var parent_1 = current;
                while (parent_1 !== start) {
                    parent_1 = parents.get(parent_1);
                    path.unshift(parent_1);
                }
                return { expanded: expanded, path: path };
            }
            parents.set(child, current);
            var oldChildScore = scores.get(child.id);
            var newChildScore = scoreFunc({
                node: child,
                parentScore: currentScore,
                distance: distance
            });
            if (oldChildScore === undefined || newChildScore < oldChildScore) {
                scores.set(child.id, newChildScore);
                fringe.queue(child);
            }
        }
    }
    return null;
}
function distanceBetween(a, b) {
    return Math.sqrt(Math.pow(a.lat - b.lat, 2) + Math.pow(a.lng - b.lng, 2));
}
function overpassToGraphNodes(_a) {
    var elements = _a.elements;
    var graphNodes = [];
    var _loop_1 = function(nodes, geometry, junction) {
        var prevGraphNode;
        var firstGraphNode;
        nodes.forEach(function (nodeId, i) {
            var graphNode = graphNodes.find(function (graphNode) { return graphNode.id === nodeId; });
            if (graphNode === undefined) {
                graphNode = {
                    id: nodeId,
                    lat: geometry[i].lat,
                    lng: geometry[i].lon,
                    connections: []
                };
                graphNodes.push(graphNode);
            }
            if (i === 0) {
                firstGraphNode = graphNode;
            }
            else {
                connect(graphNode, prevGraphNode);
            }
            if (i === nodes.length - 1 && junction === 'roundabout') {
                connect(graphNode, firstGraphNode);
            }
            prevGraphNode = graphNode;
        });
    };
    for (var _i = 0, elements_1 = elements; _i < elements_1.length; _i++) {
        var _b = elements_1[_i], nodes = _b.nodes, geometry = _b.geometry, junction = _b.tags.junction;
        _loop_1(nodes, geometry, junction);
    }
    function connect(a, b) {
        var distance = distanceBetween(a, b);
        a.connections.push({ distance: distance, child: b });
        b.connections.push({ distance: distance, child: a });
    }
    return graphNodes;
}
//# sourceMappingURL=data:application/json;base64,