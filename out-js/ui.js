'use strict';
onerror = alert;
navigator.geolocation.getCurrentPosition(function (pos) { return init(pos.coords.latitude, pos.coords.longitude); }, function () { return init(25.116035, 121.529946); } // fallback to TAS
);
function init(lat, lng) {
    var qs = document.querySelector.bind(document);
    var introScreen = qs('#intro-screen');
    var queryButton = qs('#query-button');
    var queryingScreen = qs('#querying-screen');
    var queryState = qs('#query-state');
    var chooseScreen = qs('#choose-screen');
    var startNodeIdElem = qs('#start-node-id');
    var goalNodeIdElem = qs('#goal-node-id');
    var searchButton = qs('#search-button');
    var resultsScreen = qs('#results-screen');
    var searchProgress = qs('#search-progress');
    var searchState = qs('#search-state');
    var map = L.map('map', {
        center: [lat, lng],
        zoom: 17,
        minZoom: 12
    });
    L.tileLayer('http://{s}.tile.osm.org/{z}/{x}/{y}.png', {
        attribution: '&copy; <a href="http://osm.org/copyright">OpenStreetMap</a> contributors',
        maxZoom: 21,
        maxNativeZoom: 19
    }).addTo(map);
    showElem(introScreen);
    queryButton.addEventListener('click', function () {
        hideElem(introScreen);
        showElem(queryingScreen);
        queryState.textContent = 'Querying Overpass API...';
        var bounds = map.getBounds();
        var query = "\n            [out:json];\n            way [highway] (\n                " + bounds.getSouth() + ",\n                " + bounds.getWest() + ",\n                " + bounds.getNorth() + ",\n                " + bounds.getEast() + "\n            );\n            out geom;\n        ";
        fetch('https://overpass-api.de/api/interpreter?data=' + query)
            .then(function (res) { return res.json(); })
            .then(function (data) {
            queryState.textContent = 'Creating nodes...';
            var nodes = overpassToGraphNodes(data);
            var startNode = null;
            var goalNode = null;
            var searchFunction;
            var defaultCircleStyle = {
                radius: 6,
                stroke: false,
                fillOpacity: 0.7
            };
            var nodeIdToCircle = new Map();
            var _loop_1 = function(node) {
                nodeIdToCircle.set(node.id, L.circle(node, defaultCircleStyle).bindPopup(function (circle) {
                    var elem = document.createElement('div');
                    var id = document.createElement('div');
                    id.textContent = node.id.toString();
                    elem.appendChild(id);
                    var startLink = document.createElement('a');
                    startLink.href = '#';
                    startLink.textContent = 'Set as start';
                    startLink.addEventListener('click', function () {
                        if (node === goalNode) {
                            goalNode = null;
                            goalNodeIdElem.textContent = '';
                            nodeIdToCircle.get(node.id)
                                .setStyle(defaultCircleStyle);
                        }
                        if (startNode !== null) {
                            nodeIdToCircle.get(startNode.id)
                                .setStyle(defaultCircleStyle);
                        }
                        startNode = node;
                        startNodeIdElem.textContent = startNode.id.toString();
                        checkSearchButton();
                        circle.closePopup();
                        circle.setStyle(Object.assign({
                            color: 'red'
                        }, defaultCircleStyle));
                    });
                    elem.appendChild(startLink);
                    elem.appendChild(document.createElement('br'));
                    var goalLink = document.createElement('a');
                    goalLink.href = '#';
                    goalLink.textContent = 'Set as goal';
                    goalLink.addEventListener('click', function () {
                        if (node === startNode) {
                            startNode = null;
                            startNodeIdElem.textContent = '';
                            nodeIdToCircle.get(node.id)
                                .setStyle(defaultCircleStyle);
                        }
                        if (goalNode) {
                            nodeIdToCircle.get(goalNode.id)
                                .setStyle(defaultCircleStyle);
                        }
                        goalNode = node;
                        goalNodeIdElem.textContent = goalNode.id.toString();
                        checkSearchButton();
                        circle.closePopup();
                        circle.setStyle(Object.assign({
                            color: 'green'
                        }, defaultCircleStyle));
                    });
                    elem.appendChild(goalLink);
                    return elem;
                }).addTo(map));
            };
            for (var _i = 0, nodes_1 = nodes; _i < nodes_1.length; _i++) {
                var node = nodes_1[_i];
                _loop_1(node);
            }
            var radioToFunction = {
                'uniform-cost-radio': uniformCostSearch,
                'greedy-radio': greedySearch,
                'a-star-radio': aStarSearch
            };
            var _loop_2 = function(id) {
                document.querySelector('#' + id).addEventListener('click', function () {
                    searchFunction = radioToFunction[id];
                    checkSearchButton();
                });
            };
            for (var id in radioToFunction) {
                _loop_2(id);
            }
            queryState.textContent = '';
            hideElem(queryingScreen);
            showElem(chooseScreen);
            console.log(nodes.length + ' nodes created');
            function checkSearchButton() {
                searchButton.disabled = !(startNode && goalNode && searchFunction);
            }
            searchButton.addEventListener('click', function () {
                hideElem(chooseScreen);
                showElem(resultsScreen);
                searchProgress.classList.add('mdl-progress__indeterminate');
                searchState.textContent = 'Searching...';
                var res = searchFunction(startNode, goalNode);
                searchProgress.classList.remove('mdl-progress__indeterminate');
                if (res === null) {
                    searchState.textContent = 'Path not found';
                }
                else {
                    searchState.textContent = "Path found, " + res.expanded.length + " nodes expanded, path is " + res.path.length + " nodes long";
                    for (var _i = 0, _a = res.expanded; _i < _a.length; _i++) {
                        var expanded = _a[_i];
                        nodeIdToCircle.get(expanded.id)
                            .setStyle(Object.assign({
                            color: 'darkblue'
                        }, defaultCircleStyle));
                    }
                    L.polyline(res.path, {
                        weight: 8,
                        color: 'darkblue'
                    }).addTo(map);
                    console.log(res);
                }
            });
        });
    });
    function showElem(elem) {
        elem.style.display = 'block';
    }
    function hideElem(elem) {
        elem.style.display = 'none';
    }
}
//# sourceMappingURL=data:application/json;base64,