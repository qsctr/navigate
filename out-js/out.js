'use strict';
const uniformCostSearch = (start, goal) => bestFirstSearch(start, goal, ({ parentScore, distance }) => parentScore + distance);
const greedySearch = (start, goal) => bestFirstSearch(start, goal, ({ node }) => distanceBetween(node, goal));
const aStarSearch = (start, goal) => bestFirstSearch(start, goal, ({ node, parentScore, distance }) => parentScore + distance + distanceBetween(node, goal));
function bestFirstSearch(start, goal, scoreFunc) {
    const expanded = [];
    const scores = new Map([[start.id, scoreFunc({
                node: start,
                parentScore: 0,
                distance: 0
            })]]);
    const parents = new Map();
    const fringe = new PriorityQueue({
        comparator: (a, b) => scores.get(a.id) - scores.get(b.id),
        initialValues: [start]
    });
    while (fringe.length > 0) {
        const current = fringe.dequeue();
        if (expanded.includes(current)) {
            continue;
        }
        expanded.push(current);
        const currentScore = scores.get(current.id);
        if (current === goal) {
            const path = [goal];
            let parent = goal;
            while (parent !== start) {
                parent = parents.get(parent.id);
                path.unshift(parent);
            }
            return { expanded, path, fringe };
        }
        for (const { distance, child } of current.connections) {
            if (expanded.includes(child)) {
                continue;
            }
            const oldChildScore = scores.get(child.id);
            const newChildScore = scoreFunc({
                node: child,
                parentScore: currentScore,
                distance
            });
            if (oldChildScore === undefined || newChildScore < oldChildScore) {
                scores.set(child.id, newChildScore);
                parents.set(child.id, current);
                fringe.queue(child);
            }
        }
    }
    return { expanded };
}
function distanceBetween(a, b) {
    return Math.sqrt(Math.pow(a.lat - b.lat, 2) + Math.pow(a.lng - b.lng, 2));
}
function overpassToGraphNodes({ elements }) {
    const graphNodes = [];
    for (const { nodes, geometry, tags: { junction } } of elements) {
        let prevGraphNode;
        let firstGraphNode;
        nodes.forEach((nodeId, i) => {
            let graphNode = graphNodes.find(graphNode => graphNode.id === nodeId);
            if (graphNode === undefined) {
                graphNode = {
                    id: nodeId,
                    lat: geometry[i].lat,
                    lng: geometry[i].lon,
                    connections: []
                };
                graphNodes.push(graphNode);
            }
            if (i === 0) {
                firstGraphNode = graphNode;
            }
            else {
                connect(graphNode, prevGraphNode);
            }
            if (i === nodes.length - 1 && junction === 'roundabout') {
                connect(graphNode, firstGraphNode);
            }
            prevGraphNode = graphNode;
        });
    }
    return graphNodes;
    function connect(a, b) {
        const distance = distanceBetween(a, b);
        a.connections.push({ distance, child: b });
        b.connections.push({ distance, child: a });
    }
}
'use strict';
onerror = alert;
(() => {
    const qs = document.querySelector.bind(document);
    const qsa = document.querySelectorAll.bind(document);
    const introScreen = qs('#intro-screen');
    const queryButton = qs('#query-button');
    const areaTooBig = qs('#area-too-big-warning');
    const queryingScreen = qs('#querying-screen');
    const chooseScreen = qs('#choose-screen');
    const nodesCreatedElem = qs('#nodes-created');
    const startNodeIdElem = qs('#start-node-id');
    const goalNodeIdElem = qs('#goal-node-id');
    const searchButton = qs('#search-button');
    const resultsScreen = qs('#results-screen');
    const pathResult = qs('#path-result');
    const expandedResult = qs('#expanded-result');
    const fringeResult = qs('#fringe-result');
    const backButton = qs('#back-button');
    const sidebarItems = Array.prototype.slice.call(qsa('#sidebar > *'));
    const colors = {
        default: '#3388ff',
        start: 'red',
        goal: 'green',
        expanded: 'darkblue',
        path: '#009688',
        fringe: 'orange'
    };
    let map;
    let startNode = null;
    let goalNode = null;
    let searchFunction;
    queryButton.addEventListener('click', query);
    searchButton.addEventListener('click', search);
    const radioToFunction = {
        'uniform-cost-radio': uniformCostSearch,
        'greedy-radio': greedySearch,
        'a-star-radio': aStarSearch
    };
    for (const id in radioToFunction) {
        document.querySelector('#' + id).addEventListener('click', () => {
            searchFunction = radioToFunction[id];
            checkSearchButton();
        });
    }
    backButton.addEventListener('click', chooseAgain);
    const nodeIdToCircle = new Map();
    let pathLine = null;
    navigator.geolocation.getCurrentPosition(pos => init(pos.coords.latitude, pos.coords.longitude), () => init(25.116035, 121.529946) // fallback to TAS
    );
    function init(lat, lng) {
        map = L.map('map', {
            center: [lat, lng],
            zoom: 17,
            worldCopyJump: true
        });
        L.tileLayer('http://{s}.tile.osm.org/{z}/{x}/{y}.png', {
            attribution: '&copy; <a href="http://osm.org/copyright">OpenStreetMap</a> contributors',
            maxZoom: 21,
            maxNativeZoom: 19
        }).addTo(map);
        map.on('zoom', () => {
            if (map.getZoom() < 13) {
                queryButton.disabled = true;
                showElem(areaTooBig);
            }
            else {
                queryButton.disabled = false;
                hideElem(areaTooBig);
            }
        });
        showOnly(introScreen);
    }
    function query() {
        showOnly(queryingScreen);
        const bounds = map.getBounds();
        const overpassQL = `[out:json];way[highway](${bounds.getSouth()},${bounds.getWest()},${bounds.getNorth()},${bounds.getEast()});out geom;`;
        fetch('https://overpass-api.de/api/interpreter?data=' + overpassQL)
            .then(res => res.json())
            .then(createNodes);
    }
    function createNodes(data) {
        const nodes = overpassToGraphNodes(data);
        for (const node of nodes) {
            const circle = L.circle(node, {
                radius: 6,
                stroke: false,
                fillOpacity: 0.7,
                color: colors.default
            }).bindPopup(() => {
                const elem = document.createElement('div');
                const id = document.createElement('div');
                id.textContent = node.id.toString();
                elem.appendChild(id);
                const startLink = document.createElement('a');
                startLink.href = '#';
                startLink.textContent = 'Set as start';
                startLink.addEventListener('click', () => {
                    if (node === goalNode) {
                        goalNode = null;
                        goalNodeIdElem.textContent = '';
                        nodeIdToCircle.get(node.id).setStyle({
                            color: colors.default
                        });
                    }
                    if (startNode !== null) {
                        nodeIdToCircle.get(startNode.id).setStyle({
                            color: colors.default
                        });
                    }
                    startNode = node;
                    startNodeIdElem.textContent = startNode.id.toString();
                    checkSearchButton();
                    circle.closePopup();
                    circle.setStyle({
                        color: colors.start
                    });
                });
                elem.appendChild(startLink);
                elem.appendChild(document.createElement('br'));
                const goalLink = document.createElement('a');
                goalLink.href = '#';
                goalLink.textContent = 'Set as goal';
                goalLink.addEventListener('click', () => {
                    if (node === startNode) {
                        startNode = null;
                        startNodeIdElem.textContent = '';
                        nodeIdToCircle.get(node.id).setStyle({
                            color: colors.default
                        });
                    }
                    if (goalNode !== null) {
                        nodeIdToCircle.get(goalNode.id).setStyle({
                            color: colors.default
                        });
                    }
                    goalNode = node;
                    goalNodeIdElem.textContent = goalNode.id.toString();
                    checkSearchButton();
                    circle.closePopup();
                    circle.setStyle({
                        color: colors.goal
                    });
                });
                elem.appendChild(goalLink);
                return elem;
            }).addTo(map);
            nodeIdToCircle.set(node.id, circle);
        }
        nodesCreatedElem.textContent = nodes.length.toString();
        showOnly(chooseScreen);
    }
    function search() {
        const { expanded, path, fringe } = searchFunction(startNode, goalNode);
        expandedResult.textContent = expanded.length.toString();
        for (const exp of expanded) {
            if (exp !== startNode && exp !== goalNode) {
                nodeIdToCircle.get(exp.id).setStyle({
                    color: colors.expanded
                });
            }
        }
        if (path === undefined) {
            pathResult.textContent = 'Path not found.';
        }
        else {
            pathResult.textContent = `Path found with ${path.length} nodes.`;
            pathLine = L.polyline(path, {
                weight: 8,
                color: colors.path
            }).addTo(map);
        }
        if (fringe === undefined) {
            fringeResult.textContent = 'No';
        }
        else {
            fringeResult.textContent = fringe.length.toString();
            while (fringe.length > 0) {
                nodeIdToCircle.get(fringe.dequeue().id).setStyle({
                    color: colors.fringe
                });
            }
        }
        showOnly(resultsScreen);
    }
    function chooseAgain() {
        for (const [id, circle] of nodeIdToCircle.entries()) {
            if (id !== startNode.id && id !== goalNode.id) {
                circle.setStyle({
                    color: colors.default
                });
            }
        }
        if (pathLine !== null) {
            pathLine.remove();
            pathLine = null;
        }
        showOnly(chooseScreen);
    }
    function checkSearchButton() {
        searchButton.disabled = !(startNode && goalNode && searchFunction);
    }
    function showOnly(elem) {
        for (const item of sidebarItems) {
            hideElem(item);
        }
        showElem(elem);
    }
    function showElem(elem) {
        elem.style.display = 'block';
    }
    function hideElem(elem) {
        elem.style.display = 'none';
    }
})();
//# sourceMappingURL=data:application/json;base64,